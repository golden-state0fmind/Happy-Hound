// docs: https://pris.ly/d/prisma-schema
// might need to add later in generator: previewFeatures = ["jsonProtocol"]

datasource db {
  provider  = "postgresql"
  url       = env("HHPOSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("HHPOSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  DOG_OWNER
  DOG_SITTER
}

enum DogSex {
  female
  male
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  password  String    @unique
  role      UserRole
  dogs      Dog[]
  profile   Profile?
  payments  Payment[]
  sitterSettings SitterSettings?
}

model Dog {
  id                 Int          @id @default(autoincrement())
  name               String
  userId             Int          
  user               User         @relation(fields: [userId], references: [id])
  history            DogHistory[]
  photo              String?
  weight             String
  birthMonth         String
  birthYear          String
  sex                DogSex
  breed              String
  microchipped       Boolean
  spayed             Boolean
  houseTrained       Boolean
  childFriendly      Boolean
  dogFriendly        Boolean
  catFriendly        Boolean
  adoptionDate       String
  aboutPet           String
  pottyBreakSchedule String
  energyLevel        Int
  feedingSchedule    String
  aloneTime          String
  medication         String
  additionalInfo     String?
  healthInfo         String?
  vetName            String?
  vetPhone           String?
  vetAddress         String?
}

model DogHistory {
  id        Int      @id @default(autoincrement())
  sitterId  Int
  note      String
  startTime DateTime
  endTime   DateTime
  Dog       Dog?     @relation(fields: [dogId], references: [id])
  dogId     Int?
}

model Profile {
  id            Int     @id @default(autoincrement())
  userId        Int     @unique
  user          User    @relation(fields: [userId], references: [id])
  address       String?
  city          String?
  state         String?
  postcode      String?
  country       String?
  photo         String?
  age           String?
  phone         String?
  eContactName  String?
  eContactPhone String?
}

model SitterSettings {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  index       Int
  selectedId  Int
  name        String
  city        String
  state       String
  rating      Float
  zipCode     Int
  services    String[]
  randomNum   Int
  chargeRate  Int
  description String
  profileImage String
  checked    Boolean
}

model Payment {
  id       Int     @id @default(autoincrement())
  userId   Int
  user     User    @relation(fields: [userId], references: [id])
  noc      String
  number   Int
  expMonth Int
  expYear  Int
  cvc      Int
  country  String
  address  String
  apt      String?
  city     String
  state    String
  postcode Int
}
